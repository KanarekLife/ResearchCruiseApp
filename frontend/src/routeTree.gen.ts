/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsermanagementImport } from './routes/usermanagement'
import { Route as ResetpasswordImport } from './routes/resetpassword'
import { Route as RegisterImport } from './routes/register'
import { Route as PriorityinformationImport } from './routes/priorityinformation'
import { Route as NewcruiseImport } from './routes/newcruise'
import { Route as MypublicationsImport } from './routes/mypublications'
import { Route as LoginImport } from './routes/login'
import { Route as HelpImport } from './routes/help'
import { Route as ForgotpasswordImport } from './routes/forgotpassword'
import { Route as CruiseeffectsImport } from './routes/cruiseeffects'
import { Route as CruiseapprovalImport } from './routes/cruiseapproval'
import { Route as ConfirmemailImport } from './routes/confirmemail'
import { Route as AccountsettingsImport } from './routes/accountsettings'
import { Route as IndexImport } from './routes/index'
import { Route as CruisesIndexImport } from './routes/cruises/index'
import { Route as ApplicationsIndexImport } from './routes/applications/index'
import { Route as CruisesNewImport } from './routes/cruises/new'
import { Route as CruisesCruiseIdIndexImport } from './routes/cruises/$cruiseId/index'
import { Route as ApplicationsApplicationIdFormAImport } from './routes/applications/$applicationId/formA'
import { Route as ApplicationsApplicationIdDetailsImport } from './routes/applications/$applicationId/details'

// Create/Update Routes

const UsermanagementRoute = UsermanagementImport.update({
  id: '/usermanagement',
  path: '/usermanagement',
  getParentRoute: () => rootRoute,
} as any)

const ResetpasswordRoute = ResetpasswordImport.update({
  id: '/resetpassword',
  path: '/resetpassword',
  getParentRoute: () => rootRoute,
} as any)

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const PriorityinformationRoute = PriorityinformationImport.update({
  id: '/priorityinformation',
  path: '/priorityinformation',
  getParentRoute: () => rootRoute,
} as any)

const NewcruiseRoute = NewcruiseImport.update({
  id: '/newcruise',
  path: '/newcruise',
  getParentRoute: () => rootRoute,
} as any)

const MypublicationsRoute = MypublicationsImport.update({
  id: '/mypublications',
  path: '/mypublications',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const HelpRoute = HelpImport.update({
  id: '/help',
  path: '/help',
  getParentRoute: () => rootRoute,
} as any)

const ForgotpasswordRoute = ForgotpasswordImport.update({
  id: '/forgotpassword',
  path: '/forgotpassword',
  getParentRoute: () => rootRoute,
} as any)

const CruiseeffectsRoute = CruiseeffectsImport.update({
  id: '/cruiseeffects',
  path: '/cruiseeffects',
  getParentRoute: () => rootRoute,
} as any)

const CruiseapprovalRoute = CruiseapprovalImport.update({
  id: '/cruiseapproval',
  path: '/cruiseapproval',
  getParentRoute: () => rootRoute,
} as any)

const ConfirmemailRoute = ConfirmemailImport.update({
  id: '/confirmemail',
  path: '/confirmemail',
  getParentRoute: () => rootRoute,
} as any)

const AccountsettingsRoute = AccountsettingsImport.update({
  id: '/accountsettings',
  path: '/accountsettings',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CruisesIndexRoute = CruisesIndexImport.update({
  id: '/cruises/',
  path: '/cruises/',
  getParentRoute: () => rootRoute,
} as any)

const ApplicationsIndexRoute = ApplicationsIndexImport.update({
  id: '/applications/',
  path: '/applications/',
  getParentRoute: () => rootRoute,
} as any)

const CruisesNewRoute = CruisesNewImport.update({
  id: '/cruises/new',
  path: '/cruises/new',
  getParentRoute: () => rootRoute,
} as any)

const CruisesCruiseIdIndexRoute = CruisesCruiseIdIndexImport.update({
  id: '/cruises/$cruiseId/',
  path: '/cruises/$cruiseId/',
  getParentRoute: () => rootRoute,
} as any)

const ApplicationsApplicationIdFormARoute =
  ApplicationsApplicationIdFormAImport.update({
    id: '/applications/$applicationId/formA',
    path: '/applications/$applicationId/formA',
    getParentRoute: () => rootRoute,
  } as any)

const ApplicationsApplicationIdDetailsRoute =
  ApplicationsApplicationIdDetailsImport.update({
    id: '/applications/$applicationId/details',
    path: '/applications/$applicationId/details',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/accountsettings': {
      id: '/accountsettings'
      path: '/accountsettings'
      fullPath: '/accountsettings'
      preLoaderRoute: typeof AccountsettingsImport
      parentRoute: typeof rootRoute
    }
    '/confirmemail': {
      id: '/confirmemail'
      path: '/confirmemail'
      fullPath: '/confirmemail'
      preLoaderRoute: typeof ConfirmemailImport
      parentRoute: typeof rootRoute
    }
    '/cruiseapproval': {
      id: '/cruiseapproval'
      path: '/cruiseapproval'
      fullPath: '/cruiseapproval'
      preLoaderRoute: typeof CruiseapprovalImport
      parentRoute: typeof rootRoute
    }
    '/cruiseeffects': {
      id: '/cruiseeffects'
      path: '/cruiseeffects'
      fullPath: '/cruiseeffects'
      preLoaderRoute: typeof CruiseeffectsImport
      parentRoute: typeof rootRoute
    }
    '/forgotpassword': {
      id: '/forgotpassword'
      path: '/forgotpassword'
      fullPath: '/forgotpassword'
      preLoaderRoute: typeof ForgotpasswordImport
      parentRoute: typeof rootRoute
    }
    '/help': {
      id: '/help'
      path: '/help'
      fullPath: '/help'
      preLoaderRoute: typeof HelpImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/mypublications': {
      id: '/mypublications'
      path: '/mypublications'
      fullPath: '/mypublications'
      preLoaderRoute: typeof MypublicationsImport
      parentRoute: typeof rootRoute
    }
    '/newcruise': {
      id: '/newcruise'
      path: '/newcruise'
      fullPath: '/newcruise'
      preLoaderRoute: typeof NewcruiseImport
      parentRoute: typeof rootRoute
    }
    '/priorityinformation': {
      id: '/priorityinformation'
      path: '/priorityinformation'
      fullPath: '/priorityinformation'
      preLoaderRoute: typeof PriorityinformationImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/resetpassword': {
      id: '/resetpassword'
      path: '/resetpassword'
      fullPath: '/resetpassword'
      preLoaderRoute: typeof ResetpasswordImport
      parentRoute: typeof rootRoute
    }
    '/usermanagement': {
      id: '/usermanagement'
      path: '/usermanagement'
      fullPath: '/usermanagement'
      preLoaderRoute: typeof UsermanagementImport
      parentRoute: typeof rootRoute
    }
    '/cruises/new': {
      id: '/cruises/new'
      path: '/cruises/new'
      fullPath: '/cruises/new'
      preLoaderRoute: typeof CruisesNewImport
      parentRoute: typeof rootRoute
    }
    '/applications/': {
      id: '/applications/'
      path: '/applications'
      fullPath: '/applications'
      preLoaderRoute: typeof ApplicationsIndexImport
      parentRoute: typeof rootRoute
    }
    '/cruises/': {
      id: '/cruises/'
      path: '/cruises'
      fullPath: '/cruises'
      preLoaderRoute: typeof CruisesIndexImport
      parentRoute: typeof rootRoute
    }
    '/applications/$applicationId/details': {
      id: '/applications/$applicationId/details'
      path: '/applications/$applicationId/details'
      fullPath: '/applications/$applicationId/details'
      preLoaderRoute: typeof ApplicationsApplicationIdDetailsImport
      parentRoute: typeof rootRoute
    }
    '/applications/$applicationId/formA': {
      id: '/applications/$applicationId/formA'
      path: '/applications/$applicationId/formA'
      fullPath: '/applications/$applicationId/formA'
      preLoaderRoute: typeof ApplicationsApplicationIdFormAImport
      parentRoute: typeof rootRoute
    }
    '/cruises/$cruiseId/': {
      id: '/cruises/$cruiseId/'
      path: '/cruises/$cruiseId'
      fullPath: '/cruises/$cruiseId'
      preLoaderRoute: typeof CruisesCruiseIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/accountsettings': typeof AccountsettingsRoute
  '/confirmemail': typeof ConfirmemailRoute
  '/cruiseapproval': typeof CruiseapprovalRoute
  '/cruiseeffects': typeof CruiseeffectsRoute
  '/forgotpassword': typeof ForgotpasswordRoute
  '/help': typeof HelpRoute
  '/login': typeof LoginRoute
  '/mypublications': typeof MypublicationsRoute
  '/newcruise': typeof NewcruiseRoute
  '/priorityinformation': typeof PriorityinformationRoute
  '/register': typeof RegisterRoute
  '/resetpassword': typeof ResetpasswordRoute
  '/usermanagement': typeof UsermanagementRoute
  '/cruises/new': typeof CruisesNewRoute
  '/applications': typeof ApplicationsIndexRoute
  '/cruises': typeof CruisesIndexRoute
  '/applications/$applicationId/details': typeof ApplicationsApplicationIdDetailsRoute
  '/applications/$applicationId/formA': typeof ApplicationsApplicationIdFormARoute
  '/cruises/$cruiseId': typeof CruisesCruiseIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/accountsettings': typeof AccountsettingsRoute
  '/confirmemail': typeof ConfirmemailRoute
  '/cruiseapproval': typeof CruiseapprovalRoute
  '/cruiseeffects': typeof CruiseeffectsRoute
  '/forgotpassword': typeof ForgotpasswordRoute
  '/help': typeof HelpRoute
  '/login': typeof LoginRoute
  '/mypublications': typeof MypublicationsRoute
  '/newcruise': typeof NewcruiseRoute
  '/priorityinformation': typeof PriorityinformationRoute
  '/register': typeof RegisterRoute
  '/resetpassword': typeof ResetpasswordRoute
  '/usermanagement': typeof UsermanagementRoute
  '/cruises/new': typeof CruisesNewRoute
  '/applications': typeof ApplicationsIndexRoute
  '/cruises': typeof CruisesIndexRoute
  '/applications/$applicationId/details': typeof ApplicationsApplicationIdDetailsRoute
  '/applications/$applicationId/formA': typeof ApplicationsApplicationIdFormARoute
  '/cruises/$cruiseId': typeof CruisesCruiseIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/accountsettings': typeof AccountsettingsRoute
  '/confirmemail': typeof ConfirmemailRoute
  '/cruiseapproval': typeof CruiseapprovalRoute
  '/cruiseeffects': typeof CruiseeffectsRoute
  '/forgotpassword': typeof ForgotpasswordRoute
  '/help': typeof HelpRoute
  '/login': typeof LoginRoute
  '/mypublications': typeof MypublicationsRoute
  '/newcruise': typeof NewcruiseRoute
  '/priorityinformation': typeof PriorityinformationRoute
  '/register': typeof RegisterRoute
  '/resetpassword': typeof ResetpasswordRoute
  '/usermanagement': typeof UsermanagementRoute
  '/cruises/new': typeof CruisesNewRoute
  '/applications/': typeof ApplicationsIndexRoute
  '/cruises/': typeof CruisesIndexRoute
  '/applications/$applicationId/details': typeof ApplicationsApplicationIdDetailsRoute
  '/applications/$applicationId/formA': typeof ApplicationsApplicationIdFormARoute
  '/cruises/$cruiseId/': typeof CruisesCruiseIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/accountsettings'
    | '/confirmemail'
    | '/cruiseapproval'
    | '/cruiseeffects'
    | '/forgotpassword'
    | '/help'
    | '/login'
    | '/mypublications'
    | '/newcruise'
    | '/priorityinformation'
    | '/register'
    | '/resetpassword'
    | '/usermanagement'
    | '/cruises/new'
    | '/applications'
    | '/cruises'
    | '/applications/$applicationId/details'
    | '/applications/$applicationId/formA'
    | '/cruises/$cruiseId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/accountsettings'
    | '/confirmemail'
    | '/cruiseapproval'
    | '/cruiseeffects'
    | '/forgotpassword'
    | '/help'
    | '/login'
    | '/mypublications'
    | '/newcruise'
    | '/priorityinformation'
    | '/register'
    | '/resetpassword'
    | '/usermanagement'
    | '/cruises/new'
    | '/applications'
    | '/cruises'
    | '/applications/$applicationId/details'
    | '/applications/$applicationId/formA'
    | '/cruises/$cruiseId'
  id:
    | '__root__'
    | '/'
    | '/accountsettings'
    | '/confirmemail'
    | '/cruiseapproval'
    | '/cruiseeffects'
    | '/forgotpassword'
    | '/help'
    | '/login'
    | '/mypublications'
    | '/newcruise'
    | '/priorityinformation'
    | '/register'
    | '/resetpassword'
    | '/usermanagement'
    | '/cruises/new'
    | '/applications/'
    | '/cruises/'
    | '/applications/$applicationId/details'
    | '/applications/$applicationId/formA'
    | '/cruises/$cruiseId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AccountsettingsRoute: typeof AccountsettingsRoute
  ConfirmemailRoute: typeof ConfirmemailRoute
  CruiseapprovalRoute: typeof CruiseapprovalRoute
  CruiseeffectsRoute: typeof CruiseeffectsRoute
  ForgotpasswordRoute: typeof ForgotpasswordRoute
  HelpRoute: typeof HelpRoute
  LoginRoute: typeof LoginRoute
  MypublicationsRoute: typeof MypublicationsRoute
  NewcruiseRoute: typeof NewcruiseRoute
  PriorityinformationRoute: typeof PriorityinformationRoute
  RegisterRoute: typeof RegisterRoute
  ResetpasswordRoute: typeof ResetpasswordRoute
  UsermanagementRoute: typeof UsermanagementRoute
  CruisesNewRoute: typeof CruisesNewRoute
  ApplicationsIndexRoute: typeof ApplicationsIndexRoute
  CruisesIndexRoute: typeof CruisesIndexRoute
  ApplicationsApplicationIdDetailsRoute: typeof ApplicationsApplicationIdDetailsRoute
  ApplicationsApplicationIdFormARoute: typeof ApplicationsApplicationIdFormARoute
  CruisesCruiseIdIndexRoute: typeof CruisesCruiseIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AccountsettingsRoute: AccountsettingsRoute,
  ConfirmemailRoute: ConfirmemailRoute,
  CruiseapprovalRoute: CruiseapprovalRoute,
  CruiseeffectsRoute: CruiseeffectsRoute,
  ForgotpasswordRoute: ForgotpasswordRoute,
  HelpRoute: HelpRoute,
  LoginRoute: LoginRoute,
  MypublicationsRoute: MypublicationsRoute,
  NewcruiseRoute: NewcruiseRoute,
  PriorityinformationRoute: PriorityinformationRoute,
  RegisterRoute: RegisterRoute,
  ResetpasswordRoute: ResetpasswordRoute,
  UsermanagementRoute: UsermanagementRoute,
  CruisesNewRoute: CruisesNewRoute,
  ApplicationsIndexRoute: ApplicationsIndexRoute,
  CruisesIndexRoute: CruisesIndexRoute,
  ApplicationsApplicationIdDetailsRoute: ApplicationsApplicationIdDetailsRoute,
  ApplicationsApplicationIdFormARoute: ApplicationsApplicationIdFormARoute,
  CruisesCruiseIdIndexRoute: CruisesCruiseIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/accountsettings",
        "/confirmemail",
        "/cruiseapproval",
        "/cruiseeffects",
        "/forgotpassword",
        "/help",
        "/login",
        "/mypublications",
        "/newcruise",
        "/priorityinformation",
        "/register",
        "/resetpassword",
        "/usermanagement",
        "/cruises/new",
        "/applications/",
        "/cruises/",
        "/applications/$applicationId/details",
        "/applications/$applicationId/formA",
        "/cruises/$cruiseId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/accountsettings": {
      "filePath": "accountsettings.tsx"
    },
    "/confirmemail": {
      "filePath": "confirmemail.tsx"
    },
    "/cruiseapproval": {
      "filePath": "cruiseapproval.tsx"
    },
    "/cruiseeffects": {
      "filePath": "cruiseeffects.tsx"
    },
    "/forgotpassword": {
      "filePath": "forgotpassword.tsx"
    },
    "/help": {
      "filePath": "help.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/mypublications": {
      "filePath": "mypublications.tsx"
    },
    "/newcruise": {
      "filePath": "newcruise.tsx"
    },
    "/priorityinformation": {
      "filePath": "priorityinformation.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/resetpassword": {
      "filePath": "resetpassword.tsx"
    },
    "/usermanagement": {
      "filePath": "usermanagement.tsx"
    },
    "/cruises/new": {
      "filePath": "cruises/new.tsx"
    },
    "/applications/": {
      "filePath": "applications/index.tsx"
    },
    "/cruises/": {
      "filePath": "cruises/index.tsx"
    },
    "/applications/$applicationId/details": {
      "filePath": "applications/$applicationId/details.tsx"
    },
    "/applications/$applicationId/formA": {
      "filePath": "applications/$applicationId/formA.tsx"
    },
    "/cruises/$cruiseId/": {
      "filePath": "cruises/$cruiseId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
