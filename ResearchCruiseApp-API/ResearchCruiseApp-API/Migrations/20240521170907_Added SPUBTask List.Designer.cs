// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResearchCruiseApp_API.Data;

#nullable disable

namespace ResearchCruiseApp_API.Migrations
{
    [DbContext(typeof(ResearchCruiseContext))]
    [Migration("20240521170907_Added SPUBTask List")]
    partial class AddedSPUBTaskList
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ResearchCruiseApp_API.Data.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FormA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Data.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("FormAId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Data.FormA", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AcceptablePeriodBeg")
                        .HasColumnType("int");

                    b.Property<int>("AcceptablePeriodEnd")
                        .HasColumnType("int");

                    b.Property<string>("CruiseGoalDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CruiseGoalType")
                        .HasColumnType("int");

                    b.Property<int>("CruiseHours")
                        .HasColumnType("int");

                    b.Property<Guid>("CruiseManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DeputyManagerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OptimalPeriodBeg")
                        .HasColumnType("int");

                    b.Property<int>("OptimalPeriodEnd")
                        .HasColumnType("int");

                    b.Property<string>("PeriodNotes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Permissions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermissionsRequired")
                        .HasColumnType("bit");

                    b.Property<int>("ResearchArea")
                        .HasColumnType("int");

                    b.Property<int>("ShipUsage")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("FormsA");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Data.SPUBTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FormAId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearFrom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormAId");

                    b.ToTable("SPUBTask");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Data.Contract", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Data.FormA", null)
                        .WithMany("Contracts")
                        .HasForeignKey("FormAId");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Data.SPUBTask", b =>
                {
                    b.HasOne("ResearchCruiseApp_API.Data.FormA", null)
                        .WithMany("SPUBTasks")
                        .HasForeignKey("FormAId");
                });

            modelBuilder.Entity("ResearchCruiseApp_API.Data.FormA", b =>
                {
                    b.Navigation("Contracts");

                    b.Navigation("SPUBTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
